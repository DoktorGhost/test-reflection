// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: api/grpc/protobuf/disc_service_v1/disc_service_v1.proto

package disc_service_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DiscService_GetResources_FullMethodName = "/combo.DiscService/GetResources"
)

// DiscServiceClient is the client API for DiscService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscServiceClient interface {
	GetResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResourcesResponse, error)
}

type discServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscServiceClient(cc grpc.ClientConnInterface) DiscServiceClient {
	return &discServiceClient{cc}
}

func (c *discServiceClient) GetResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, DiscService_GetResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscServiceServer is the server API for DiscService service.
// All implementations must embed UnimplementedDiscServiceServer
// for forward compatibility
type DiscServiceServer interface {
	GetResources(context.Context, *emptypb.Empty) (*GetResourcesResponse, error)
	mustEmbedUnimplementedDiscServiceServer()
}

// UnimplementedDiscServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiscServiceServer struct {
}

func (UnimplementedDiscServiceServer) GetResources(context.Context, *emptypb.Empty) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedDiscServiceServer) mustEmbedUnimplementedDiscServiceServer() {}

// UnsafeDiscServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscServiceServer will
// result in compilation errors.
type UnsafeDiscServiceServer interface {
	mustEmbedUnimplementedDiscServiceServer()
}

func RegisterDiscServiceServer(s grpc.ServiceRegistrar, srv DiscServiceServer) {
	s.RegisterService(&DiscService_ServiceDesc, srv)
}

func _DiscService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscService_GetResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscServiceServer).GetResources(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscService_ServiceDesc is the grpc.ServiceDesc for DiscService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "combo.DiscService",
	HandlerType: (*DiscServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResources",
			Handler:    _DiscService_GetResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/protobuf/disc_service_v1/disc_service_v1.proto",
}
